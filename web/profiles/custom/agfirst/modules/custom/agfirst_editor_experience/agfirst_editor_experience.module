<?php

/**
 * @file
 * Contains agfirst_editor_experience.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function agfirst_editor_experience_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the agfirst_editor_experience module.
    case 'help.page.agfirst_editor_experience':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Improvements to the editor experience specific to AgFirst sites.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agfirst_editor_experience_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Since sites may define their own forms, list supported forms explicity.
  $supported_node_forms = [
    'node_article_form',
    'node_page_form',
    'node_event_form',
    'node_landing_page_form',
    'node_location_form',
    'node_marketing_page_form',
    'node_person_detail_form',
  ];

  if (!in_array($form_id, $supported_node_forms)) {
    return;
  }

  $function = 'agfirst_editor_experience_' . $form_id;

  if (function_exists($function)) {
    $function($form, $form_state);
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Targets article node forms.
 */
function agfirst_editor_experience_node_article_form(&$form, FormStateInterface &$form_state) {
  // Media type switch.
  $form['field_image']['#states'] = [
    'required' => [
      ':input[name="field_media_type"]' => ['value' => 'image'],
    ],
    'enabled' => [
      ':input[name="field_media_type"]' => ['value' => 'image'],
    ],
    'visible' => [
      ':input[name="field_media_type"]' => ['value' => 'image'],
    ],
  ];
  $form['field_video']['#states'] = [
    'required' => [
      ":input[name='field_media_type']" => ['value' => 'video'],
    ],
    'enabled' => [
      ":input[name='field_media_type']" => ['value' => 'video'],
    ],
    'visible' => [
      ":input[name='field_media_type']" => ['value' => 'video'],
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function agfirst_editor_experience_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {

  if ($context['widget']->getPluginId() != "entity_reference_paragraphs") {
    return;
  }

  // Media type switch.
  if (!empty($element['subform']['field_media_type'])) {

    $type_selector = ':input[name="field_layers[' . $context['delta'] . '][subform][field_media_type]"]';

    $element['subform']['field_image']['#states'] = [
      'required' => [
        $type_selector => ['value' => 'image'],
      ],
      'enabled' => [
        $type_selector => ['value' => 'image'],
      ],
      'visible' => [
        $type_selector => ['value' => 'image'],
      ],
    ];

    $element['subform']['field_video']['#states'] = [
      'required' => [
        $type_selector => ['value' => 'video'],
      ],
      'enabled' => [
        $type_selector => ['value' => 'video'],
      ],
      'visible' => [
        $type_selector => ['value' => 'video'],
      ],
    ];

    $element['subform']['field_media_side']['#states'] = [
      'required' => [
        $type_selector => [
          ['value' => 'video'],
          ['value' => 'image'],
        ],
      ],
      'enabled' => [
        $type_selector => [
          ['value' => 'video'],
          ['value' => 'image'],
        ],
      ],
      'visible' => [
        $type_selector => [
          ['value' => 'video'],
          ['value' => 'image'],
        ],
      ],
    ];

  }

  // Feed Automation Switch.
  if (!empty($element['subform']['field_feed_type'])) {

    $type_selector = ':input[name="field_layers[' . $context['delta'] . '][subform][field_feed_type]"]';

    $element['subform']['field_content_type']['#states'] = [
      'required' => [
        $type_selector => ['value' => 'auto'],
      ],
      'enabled' => [
        $type_selector => ['value' => 'auto'],
      ],
      'visible' => [
        $type_selector => ['value' => 'auto'],
      ],
    ];

    $element['subform']['field_curated_content']['#states'] = [
      'required' => [
        $type_selector => ['value' => 'manual'],
      ],
      'enabled' => [
        $type_selector => ['value' => 'manual'],
      ],
      'visible' => [
        $type_selector => ['value' => 'manual'],
      ],
    ];

  }


}
